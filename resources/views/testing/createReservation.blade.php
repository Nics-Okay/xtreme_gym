<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .time-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            max-width: 340px;
            margin: 20px auto;
        }

        .time-slot {
            padding: 5px 0;
            font-size: 14px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            background-color: #e8f5e9; /* Available */
            color: #333;
        }

        .time-slot:hover {
            background-color: #c8e6c9;
        }

        .time-slot.selected {
            background-color: #2196f3; /* Selected */
            color: white;
        }

        .time-slot.unavailable {
            background-color: #ccc; /* Unavailable */
            color: #666;
            cursor: not-allowed;
            text-decoration: line-through;
        }

        .feedback {
            text-align: center;
            margin-top: 20px;
        }

        .reset-button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .reset-button:hover {
            background-color: #d32f2f;
        }
    </style>
</head>
<body>

<h3 style="text-align: center;">Select Your Reservation Time</h3>
<div class="time-grid" id="timeGrid">
    <!-- Time slots dynamically generated by JavaScript -->
</div>

<div class="feedback" id="feedback">Select consecutive hours.</div>
<button class="reset-button" id="resetButton">Reset</button>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const timeGrid = document.getElementById('timeGrid');
        const feedback = document.getElementById('feedback');
        const resetButton = document.getElementById('resetButton');
        const hours = Array.from({ length: 16 }, (_, i) => i + 6); // 6 AM to 10 PM (24-hour format)
        const reserved = [9, 10, 18]; // Example reserved hours in 24-hour format

        let selected = [];

        // Function to format time in "6:00 AM - 7:00 AM" format
        function formatTimeRange(startHour, endHour) {
            const format = hour => {
                const period = hour >= 12 ? 'PM' : 'AM';
                const hour12 = hour % 12 || 12;
                return `${hour12}:00 ${period}`;
            };
            return `${format(startHour)} - ${format(endHour)}`;
        }

        // Function to update feedback based on selected times
        function updateFeedback(selectedHours) {
            if (selectedHours.length === 0) {
                feedback.textContent = 'Select consecutive hours.';
                return;
            }

            selectedHours.sort((a, b) => a - b);
            feedback.textContent = `Selected Time: ${formatTimeRange(selectedHours[0], selectedHours[selectedHours.length - 1] + 1)}`;
        }

        // Function to handle slot selection
        function handleSlotClick(slot) {
            const hour = parseInt(slot.dataset.hour);

            if (slot.classList.contains('unavailable')) return;

            if (selected.length === 0) {
                // Start selection
                selected.push(hour);
                slot.classList.add('selected');
            } else {
                const min = Math.min(...selected);
                const max = Math.max(...selected);

                if (hour < min || hour > max) {
                    // Attempting to set an end time
                    const range = [...Array(Math.abs(hour - min) + 1).keys()].map(i =>
                        hour < min ? min - i : min + i
                    );

                    // Check for unavailable slots
                    const unavailable = range.some(h => reserved.includes(h));
                    if (unavailable) {
                        alert('Cannot select range with unavailable hours.');
                        return;
                    }

                    // Select all hours in the range
                    selected = range;
                    document.querySelectorAll('.time-slot').forEach(s => {
                        if (range.includes(parseInt(s.dataset.hour))) {
                            s.classList.add('selected');
                        } else {
                            s.classList.remove('selected');
                        }
                    });
                } else {
                    // Clear selection if clicked within range
                    selected = [];
                    document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
                }
            }

            updateFeedback(selected);
        }

        // Reset all selections
        function resetSelections() {
            selected = [];
            document.querySelectorAll('.time-slot').forEach(slot => slot.classList.remove('selected'));
            updateFeedback([]);
        }

        // Render time slots
        hours.forEach(hour => {
            const slot = document.createElement('div');
            slot.classList.add('time-slot');
            slot.textContent = formatTimeRange(hour, hour + 1);
            slot.dataset.hour = hour;

            // Mark as unavailable if reserved
            if (reserved.includes(hour)) {
                slot.classList.add('unavailable');
            }

            slot.addEventListener('click', function () {
                handleSlotClick(slot);
            });

            timeGrid.appendChild(slot);
        });

        // Add event listener to reset button
        resetButton.addEventListener('click', resetSelections);
    });
</script>

</body>
</html>
